// Copyright 2020 Syntio Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Package registry handles sending requests and receiving responses from Schema Registry's REST server.
// This file implements obtaining schema with specified schema id and version.
package registry

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

// Schema represents a message schema from Schema Registry.
type Schema struct {
	Id            string           `json:"id,omitempty"`
	SchemaType    string           `json:"schema-type"`
	Autogenerated bool             `json:"autogenerated"`
	Description   string           `json:"description"`
	CreationDate  time.Time        `json:"creation-date"`
	Name          string           `json:"name"`
	SchemaDetails []*SchemaDetails `json:"schemas"`
}

// SchemaDetails represents details of a Schema.
type SchemaDetails struct {
	Version       int32  `json:"version"`
	Specification string `json:"specification"`
	SchemaHash    string `json:"schema-hash"`
}

type report struct {
	Message string `json:"message"`
}

// deserializeIntoSchema deserializes the byte representation of 
// a JSON to return a Schema struct.
//
// Input parameter is a byte representation of a JSON.
//
// Output parameters are a struct with schema details from a given 
// JSON, and a bool which indicates whether the deserialization was 
// successful or not. 
func deserializeIntoSchema(responseBody []byte) (*Schema, bool) {
	schema := Schema{}

	if err := json.Unmarshal(responseBody, &schema); err != nil {
		log.Printf("ERROR: Couldn't deserialize JSON response to Schema Info: %v", err)
		return nil, false
	}

	return &schema, true
}

// deserializeIntoString deserializes the byte representation of 
// a JSON to return a message hidden in it.
//
// Input parameter is a byte representation of a JSON.
//
// Output parameters are a string with schema details from a given 
// JSON, and a bool which indicates whether the deserialization was 
// successful or not. 
func deserializeIntoString(jsonMessage []byte) (string, bool) {
	structureMessage := report{}

	if err := json.Unmarshal(jsonMessage, &structureMessage); err != nil {
		log.Printf("ERROR: Couldn't serialize JSON info message to message string: %v", err)
		return "", false
	}

	return structureMessage.Message, true
}

// GetSchema communicates with the Schema registry to retrieve the specified schema.
//
// Input parameters are schema's ID and version, and URL of Schema Registry for communication with it.
//
// Output parameteres are a struct containing details about schema, and a bool which indicates whether 
// schema is obtained or not, and a possible error occurred while communication with Schema Registry.
func GetSchema(schemaID string, versionID string, schemaRegistryURL string) (*Schema, bool, error) {
	finalURL := fmt.Sprintf("%s/schema/%s/version/%s", schemaRegistryURL, schemaID, versionID)
	
	// Send request to Schema Registry to get schema
	response, err := http.Get(finalURL)
	if err != nil {
		return nil, false, fmt.Errorf("ERROR: Couldn't communicate with Schema Registry URL: %s", finalURL)
	}

	// Read Schema Registry's response
	responseBody, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return nil, false, fmt.Errorf("ERROR: Couldn't read response from Schema Registry URL: %s", finalURL)
	}

	defer response.Body.Close()

	// If response is okay, return obtained schema
	if response.StatusCode == http.StatusOK {
		responseStructure, success := deserializeIntoSchema(responseBody)
		return responseStructure, success, nil
	} else {
		infoMessage, _ := deserializeIntoString(responseBody)
		return nil, false, fmt.Errorf("ERROR: Reponse status from Schema Registry is not ok: %s", infoMessage)
	}
}
